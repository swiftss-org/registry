
@application.route('/episode/<int:id>', methods=['GET', 'POST'])
@login_required
def episode(id):
    episode = db.session.query(Episode).filter(Episode.id == id).first()
    surgery = db.session.query(Surgery).filter(Surgery.episode_id == id).first()

    form = EpisodeEditForm(obj=episode)
    form.patient_id.disabled = True
    form.hospital_id.choices = _hospital_id_choices()
    form.patient_id.choices = _patient_id_choices()
    form.attendee_id.choices = _attendee_id_choices()

    if form.validate_on_submit():
        episode.episode_type = form.episode_type.data
        episode.date = form.date.data
        episode.patient_id = form.patient_id.data
        episode.hospital_id = form.hospital_id.data
        episode.comments = form.comments.data

        episode.attendees = attendees_parser.from_json(form.attendees.data, episode.id)

        episode.updated_by = current_user

        db.session.commit()

        flash('Episode details have been updated.')

        if form.next_action.data == 'RecordSurgery':
            return redirect(url_for('surgery_create', episode_id=episode.id))

        return redirect(url_for('episode', id=episode.id))

    return render_template('episode.html', title='Episode Details', form=form, episode=episode, surgery=surgery,
                           edit_disabled=False)


@application.route('/episode_search', methods=['GET', 'POST'])
@login_required
def episode_search():
    form = EpisodeSearchForm()
    form.patient_id.disabled = False
    form.hospital_id.choices = _hospital_id_choices(include_empty=True)
    form.patient_id.choices = _patient_id_choices(include_empty=True)
    form.attendee_id.choices = _attendee_id_choices()

    if form.is_submitted():
        filter = []
        if form.date.data:
            filter.append(Episode.date == form.date.data)
        if form.episode_type.data:
            filter.append(Episode.episode_type == form.episode_type.data)
        if form.hospital_id.data:
            filter.append(Episode.hospital_id == form.hospital_id.data)
        if form.patient_id.data:
            filter.append(Episode.patient_id == form.patient_id.data)

        episodes = db.session.query(Episode).filter(and_(*filter)).order_by(Episode.date).all()
        return render_template('episode_search.html',
                               title='Episode Search',
                               form=form,
                               results=episodes,
                               edit_disabled=False)

    return render_template('episode_search.html', title='Episode Search', form=form, edit_disabled=False)


@application.route('/episode_create', methods=['GET', 'POST'])
@application.route('/episode_create/<int:patient_id>', methods=['GET', 'POST'])
@login_required
def episode_create(patient_id=None):
    episode = Episode()
    form = EpisodeEditForm(obj=episode)
    form.hospital_id.choices = _hospital_id_choices()
    form.patient_id.choices = _patient_id_choices()
    form.attendee_id.choices = _attendee_id_choices()

    form.date.data = datetime.today()

    if patient_id:
        form.patient_id.data = str(patient_id)

    if form.validate_on_submit():
        episode.episode_type = form.episode_type.data
        episode.date = form.date.data
        episode.patient_id = form.patient_id.data
        episode.hospital_id = form.hospital_id.data
        episode.comments = form.comments.data

        episode.attendees = attendees_parser.from_json(form.attendees.data, episode.id)

        episode.created_by = current_user
        episode.updated_by = current_user

        db.session.add(episode)
        db.session.commit()

        flash('Episode details have been recorded.')

        if form.next_action.data == 'RecordSurgery':
            return redirect(url_for('surgery_create', episode_id=episode.id))

        return redirect(url_for('episode', id=episode.id))

    return render_template('episode.html', title='Record Episode Details',
                           form=form,
                           episode=episode,
                           edit_disabled=False)


@application.route('/surgery/<int:id>', methods=['GET', 'POST'])
@login_required
def surgery(id):
    surgery = db.session.query(Surgery).filter(Surgery.id == id).first()
    form = SurgeryForm(obj=surgery)
    form.procedure_id.choices = _procedure_id_choices()

    if form.validate_on_submit():
        surgery.cepod = form.cepod.data
        surgery.date_of_discharge = form.date_of_discharge.data
        surgery.side = form.side.data
        surgery.primary = form.primary.data
        surgery.type = form.type.data
        surgery.additional_procedure = form.additional_procedure.data
        surgery.antibiotics = form.antibiotics.data
        surgery.comments = form.comments.data
        surgery.opd_rv_date = form.opd_rv_date.data
        surgery.opd_pain = form.opd_pain.data
        surgery.opd_numbness = form.opd_numbness.data
        surgery.opd_infection = form.opd_infection.data
        surgery.opd_comments = form.opd_comments.data

        episode.updated_by = current_user

        db.session.commit()

        flash('Surgery details have been updated.')
        return redirect(url_for('surgery', id=surgery.id))

    return render_template('surgery.html', title='Surgery Details', form=form, surgery=surgery)


@application.route('/surgery_create/<int:episode_id>', methods=['GET', 'POST'])
@login_required
def surgery_create(episode_id):
    procedure_id_choices = _procedure_id_choices()

    surgery = Surgery()
    episode = db.session.query(Episode).filter(Episode.id == episode_id).first()

    if episode is None:
        raise ValueError('Unable to find an episode with id {}'.format(episode_id))

    surgery.episode = episode

    form = SurgeryForm(obj=surgery)
    form.procedure_id.choices = procedure_id_choices

    if form.validate_on_submit():
        surgery.procedure_id = form.procedure_id.data
        surgery.cepod = form.cepod.data
        surgery.date_of_discharge = form.date_of_discharge.data
        surgery.side = form.side.data
        surgery.primary = form.primary.data
        surgery.type = form.type.data
        surgery.additional_procedure = form.additional_procedure.data
        surgery.antibiotics = form.antibiotics.data
        surgery.comments = form.comments.data
        surgery.opd_rv_date = form.opd_rv_date.data
        surgery.opd_pain = form.opd_pain.data
        surgery.opd_numbness = form.opd_numbness.data
        surgery.opd_infection = form.opd_infection.data
        surgery.opd_comments = form.opd_comments.data

        surgery.created_by = current_user
        surgery.updated_by = current_user

        db.session.add(surgery)
        db.session.commit()

        flash('Surgery details have been updated.')
        return redirect(url_for('surgery', id=surgery.id))

    return render_template('surgery.html', title='Surgery Details', form=form, surgery=surgery)

